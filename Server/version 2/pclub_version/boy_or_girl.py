import os
import math
from flask import Flask, request, redirect, url_for, make_response
import numpy as np
from werkzeug import secure_filename
from rotate import rotate
from find_rect_range import find_rect_range
import dlib
from imread_with_EXIF_orientation import imread_with_EXIF_orientation
from feedforward import feedforward

predictor_path = r"/var/local/magic_mirror/shape_predictor_68_face_landmarks.dat"
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor(predictor_path)

weights = [[[-2.337665474708366, -1.2952507930104962, 4.093552845311534, -0.4804103816987628, -1.4237117528520713, 0.2379277230357013, -0.7026053789588266, -0.530103473719777, -1.5089147399176661, -0.2569227175633964, 3.005665386266777, 0.6407452807745415, -1.2320928158061926, -0.10841692069023348, -0.2274757076910267, -4.164561231505662, 1.905238910140176, 4.2040258212549215, -1.4406791381411879, -2.606585198318795, -0.1704314289690549, -0.41892774780849856, 2.1500856413915748, 0.1243637421943978, -1.4751166395947553, -0.8043810419125381, -0.772392184756538, 0.6794220811076466, -0.6196702470242406, -0.9705136166479701, 4.256461357681989, 0.23180894849475, -3.0037665888631526, -1.215672852561363, 0.2586432680682791, 4.681318738500062, -3.709415005688747, -1.2746178367070835, -0.7140492734834192, 1.3783533645054065, 1.7077468523430401, -0.26637774046707424, 3.110588657000223, -4.34141685564505, 4.326334360390867, -4.66776010570314, 0.3819073710547787, 0.09857081161195103, 1.0196133561278307, 2.1498392880303046, -3.4661012144782455, -0.8892267020156402, -0.4996484646239, 4.070661312365237, -0.30673890097135253, 2.2665024103274893, 1.7076490777959363, -0.02969237191774098, 1.9058640628297567, 1.4226580430228992, 2.080744185513831, 2.0399448635334703, -4.152779681824909, -6.112887853215767, 0.5042361401472366, -0.4062759731162926, 1.4565634769588784, 1.5767656146511793, 0.7195619594341732, -0.7809843975913828, -3.4132964493728597, -4.422911180249065, 1.9936359545540143, -2.438336165819249, 0.4480438305181805, 0.2646517102468837, 0.9638715335517729, 2.408686155199063, 0.31250137642534176, -3.0679507915431503, 0.3195845922213834, 2.3614041963600054, -1.9846297205829746, -0.026197706887921387, -0.1706254786424562, -2.9811886192589383, 0.521543255037942, 2.4772259376271673, 1.0331594309553438, 1.3714964223030752, 4.050980610201738, -3.701968861968572, -1.3899611307726485, -1.1111441933457988, -1.303395063062904, 1.7623402985108763, 1.0272357294770385, 1.7123954591880728, -1.328362006001461, 0.9303585769349836, -0.1589167726587264, 0.834971925572832, 0.6268945408069012, 3.9199057633268626, 0.259006537234649, 0.7355464765516319, -2.0886826113136214, -0.017351628735119317, 0.48860731743177854, 2.001280199625006, 0.5340737978099931, -0.2294111222733602, -0.9189460496249788, -1.7515167956141946, 2.5663573399767756, 0.6432659993184203, -1.2640285796655815, -0.789202110042818, 1.8069030730165025, 0.007450433263322213, -2.307050726301587, -0.3708288338083159, 0.03177040703546684, -3.095937010241358, 2.988355073003263, 1.7806677593124347, 0.1777377642960905, -2.797697044493476, -1.5727774098082448, 0.5359016530274922, -0.6936334777016602, -1.0162468935700038, 2.316327323455458, 3.8514094068890756, -0.168763722980476, -1.3960931976392517, 1.3766284243346805], [0.7955357077610138, 0.9905924868406224, -1.4186928250267392, 0.2403634511999439, 0.03456063670297384, -0.8943479699535124, -0.791912381026336, 0.9610784694906884, 1.0612937125446549, 1.8467005285407116, 0.18740134611051582, -0.6583330921794556, 0.2429763121004793, -0.7424939236820552, 1.3080891469914528, 0.6149726593151306, -0.10451845026175115, -3.075577585147586, 1.675776771324632, 0.5205046942968651, 0.39975325177726806, 0.2899757898397775, -0.3255084523802307, -1.1736034383245904, 0.5423838307936928, 1.7026859388762525, 1.1290987532269303, 0.16903393677117762, -0.183383506786985, -0.5215849919861425, -2.513218544487431, 0.324842150258008, 1.3300408002405357, 1.3659050910776485, 0.06985819975190481, -2.9861266762532206, 1.5197604782981287, -0.14408956171360018, 0.7905574259183465, -0.5339139406089647, 0.7321974269279089, -1.2092015764925765, -1.5126966861588498, 0.66336873521637, -1.0520274109065622, 1.9372554738199055, -1.2856275074380072, -0.6990268392477262, 0.553979959096012, 0.3829975926979485, 2.443241643523308, 0.10198202912055246, 0.43954071277372797, -3.8044556581093767, -0.5834462787468686, 0.46868038377223903, -0.8007814100711926, -0.15048058479031207, 0.2822150980411822, -0.026671660934640556, 0.9892286644995151, 0.26833389406077635, 0.7958029558198723, 0.8038514177286745, 0.5597693074771721, 0.8822091942789589, -2.5835332510969096, -1.2535238306447538, -0.7764211525883115, -0.37753145632814095, 1.933988463994057, 1.1813777643431547, 0.45316740777235986, 0.3778527974838137, 0.16987894758848066, -0.13532384998578004, -0.7127169810188774, -1.1886407638018317, -1.3027799844619417, 1.1514707892751475, 0.31023043280786716, -0.045024539272280305, -0.10784867078177689, 0.6593676979082406, -0.5227265762370804, 0.9732826201283135, -1.2734932174818776, -0.9464930520777909, -0.008063291038116874, 1.0016483947094819, -0.9015832313925443, -0.20394382708616843, 0.6676119309794044, 0.50784950667908, -0.29627378956152045, -1.1080034026481216, -1.3201734987365106, -0.5542629237694611, -0.14489032091446907, 0.16391562724667533, 0.13234291480588634, -0.5639197230200581, 0.13750037162929732, -1.012339364553999, 0.13350979393403514, -0.3257629610508092, 2.274860246170314, -0.26614360566529993, -2.1105397159348316, -0.11231955473816436, -0.3225816276944782, -0.3780378176446919, 0.9799720987624863, 2.592706524109674, -1.4878807353520076, 2.153273808495681, 1.017455520138735, 0.7516307825252561, 0.9713997029620113, 0.21269646023381478, 1.2777435250831486, -0.7979948175422963, -0.6629099115323533, 0.5356722965539578, -1.6560937852832505, -1.8153458131380258, -0.6193314795201686, 0.6959962735580594, 1.1383740644274656, -1.497166645381062, -0.423635876636147, 3.003084905015752, -1.5128279319416256, -1.7733179758949313, 1.0208922129195952, 1.85868141347991, -1.3935072442402723]], [[-1.4797587025186254, 0.5114722838137057, 0.7443497133284867]]]

static_submit_form =  "<html><body>" + open("static_html.template","r").read()

print("Привет!")
UPLOAD_FOLDER = './img/'
ALLOWED_EXTENSIONS = set(['jpg','jpeg','png'])

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 12 * 1024 * 1024
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.debug = False

def allowed_file(filename):
	return '.' in filename and \
		   filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def normalized_landmark_vector(landmarks):
	""" Нормализация "волшебных" точек
		На данный момент:
			Вертикальная ориентация лица
			Приведение к единичному масштабу
	"""

	# Считаем угол таким образом, что положительное направление - склонённость к правому плечу
	# Центр - 28-я точка - т.е. landmarks[27]

	nose_bridge = landmarks[27]

	eyes_vector_x, eyes_vector_y = landmarks[45][0] - landmarks[36][0], landmarks[45][1] - landmarks[36][1]
	angle = - math.atan(eyes_vector_y / eyes_vector_x)
	
	
	#print("Угол равен %f градусов (наклон к правому плечу)" % (angle * 180 / math.pi))
	verticalized = [rotate((x,y), origin = nose_bridge, angle = angle) for (x, y) in landmarks]

	# Временно - как хеш лица используем только глаза
	# verticalized = verticalized[42:48] + verticalized[36:42]

	((x1, y1), (x2, y2)) = find_rect_range(verticalized)
	width = x2 - x1
	height = y2 - y1
	
 
	normalized = verticalized
	normalized = [((x-x1) / width, (y-y1) / width) for (x, y) in verticalized]
	return normalized
		   

def distance(x1,y1, x2, y2):
	return math.sqrt( (x1-x2)**2 + (y1-y2)**2)

def magic_distances_from_landmarks(a):


	# Первая опорная точка
	xc1 = a[27][0]
	yc1 = a[27][1]


	# Вторая опорная точка
	xc2 = a[57][0]
	yc2 = a[57][1]


	distances = []

	for (x, y) in a:
		"""
		x.append(i[0])
		y.append(i[1])
		"""
		

		d1 = distance(x,y, xc1, yc1) 
		d2 = distance(x,y, xc2, yc2) 
		
		distances.append(d1)
		distances.append(d2)
	return distances




@app.route("/", methods=['GET', 'POST'])
def index():
	if request.method == 'POST':
		print("Заголовки request.headers: ", request.headers)
		file = request.files['file']
		print("Файлы request.files=%s" % request.files)
		if file and allowed_file(file.filename):
			print("Сохраняем файл")
			filename = secure_filename(file.filename)
			full_filename = os.path.join(app.config['UPLOAD_FOLDER'], filename)
			file.save(full_filename)
			print("Сохранили файл")


			img = imread_with_EXIF_orientation(full_filename) # Считали картинку и поместили ее в ndarray
			faces, confidence, idx = detector.run(img, 1)

			shape = predictor(img, faces[0])
			distances = magic_distances_from_landmarks(normalized_landmark_vector([(shape.part(i).x, shape.part(i).y) for i in range(0, 68)]))
			result = feedforward(distances, (2, 1), weights)
			return "<h2> Result: " + str(result) + "</h2>"+ static_submit_form


		else:
			return '{"Error":"123","ErrorText":"Bad file format"}'
	#return  "Тут мы ждем файлик!"
	return static_submit_form
	

print("Сейчас будем запускать сервер!")
if __name__ == "__main__":
	app.run(host='0.0.0.0', port=8888)